#!/bin/bash

## Local updater
## Alex Newman - 2021-03-15

# std variables
reponame=""
addcomm=""
setupfile="setup.cfg"
release_msg="release"

# paths
pythonbin=$(which python3)
# find local dir (loop until the file is no longer a symlink)
source="${BASH_SOURCE[0]}"
while [ -h "$source" ]; do
    this_path="$( cd -P "$( dirname "$source" )" >/dev/null 2>&1 && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && $source="$this_path/$source"
done
this_path="$( cd -P "$( dirname "$source" )" >/dev/null 2>&1 && pwd )"

# functions
function updt_arg () {
    if [ "$1" == "-p" ]; then
        release_msg="pre-release"
    elif [ "$1" == "-py" ]; then
        addcomm="-py"
        setupfile="setup.py"
    elif [ ! -z "$1" ]; then
        echo -e "Not supported option $1."
        echo -e "Try ./update_release --help for usage options"
        exit 1
    fi
}

function bye () {
    exit $1
}

function rmdir_if_exists () {
    if [[ -d "$1" ]]; then
        rm -rf "$1"
    fi
}

function print_help () {
    echo -e "\nUsage:"
    echo -e "./update_release dir (major | minor | patch) [-p] [-py]"
    echo -e "- First arg points the dir to operate over and is NOT-OPTIONAL"
    echo -e "- Second arg indicates the release type and is NOT-OPTIONAL"
    echo -e "- Third arg indicates if it is a pre-release and is OPTIONAL"
    echo -e "- Fourth arg indicates if the script should operate over setup.py\
 instead of setup.cfg and is OPTIONAL"
}

# execution
if [ "$#" -lt 1 ] || [ "$#" -gt 4 ]; then
    echo -e "Illegal number of parameters"
    print_help
    exit 1
fi

if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    print_help
    bye 0
fi

if [[ ! -d "$1" ]]; then
    echo -e "The provided dir $1 does not exists or this script does not have permission"
    bye 1
elif [[ -f "$1" ]]; then
    echo -e "It seems like $1 is a file instead of a directory"
    bye 1
else
    regex='/?([^/]+)/?$'
    passed_dir=$(readlink -f "$1")
    if [[ "$passed_dir" =~ $regex ]]; then
        reponame="${BASH_REMATCH[1]}"
    else
        echo -e "Could not guess the repo name from $passed_dir"
        bye 1
    fi
fi

# navigate to the specified directory
cd "$1"

# if there are previous setup bdist_wheel and sdist dirs, delete them
rmdir_if_exists dist/
rmdir_if_exists "$reponame.egg-info"
rmdir_if_exists build/

if [ "$2" != "major" ] && [ "$2" != "minor" ] && [ "$2" != "patch" ]; then
    echo -e "Not supported release type. Choose between 'major', 'minor' and 'patch'"
    print_help
    bye 1
fi

# update arguments
updt_arg $3
updt_arg $4

# calculate new version number
new_version=$($pythonbin "$this_path/update_release.py" $2 -y $addcomm)
rtn=$?
if [ $rtn -ne 0 ]; then
    echo -e "New version failed"
    bye 1
fi
echo -e "New version number will be v$new_version"

# test if current branch is main
cur_branch=$(git rev-parse --abbrev-ref HEAD)
rtn=$?
if [ $rtn -ne 0 ]; then
    echo -e "Git branch revision failed"
    bye 1
elif [ "$cur_branch" != "main" ]; then
    echo -e "The current branch is '$cur_branch'."
    echo -e "Please switch and merge to 'main' to continue."
    bye 1
fi

# commit modifications and push current branch
echo -e "Setting up commit and push in branch '$cur_branch'"
git add "$setupfile"
git commit -m "new $release_msg v$new_version"
git push origin $cur_branch

# add new release to github. Your github credentials may be asked
hub release create -m "$release_msg-$2-v$new_version" "v$new_version"
rtn=$?
if [ $rtn -ne 0 ]; then
    echo -e "hub release control failed. Is it installed? Ignoring and continuing"
else
    echo -e "Release created (hub)"
fi

# build package before pushing it to pypi. Your PyPi credentials may be asked
$pythonbin setup.py sdist bdist_wheel
echo -e "Uploading to PyPi. Your PyPi credentials may be asked"
twine upload -r pypitest dist/*  # push to TestPyPi
rtn=$?

# if previous upload to pypitest finished succefully, upload to pypi
if [ $rtn -eq 0 ]; then
    twine upload -r pypi dist/*  # push to PyPi
    rtn=$?
fi

genmetafailed=0
if [ $rtn -eq 0 ]; then
    # upload to pypi was successful

    # check if there is a conda dir and creates if not
    if [[ ! -d "conda/$reponame" ]]; then
        mkdir -p "conda/$reponame"
    fi

    $pythonbin "$this_path/genmeta.py" "$reponame" dist/*.tar.gz \
               "$new_version" "conda/$reponame/meta.yaml" $addcomm
    genmetafailed=$?
fi

# clear the mess created here
rmdir_if_exists dist/
rmdir_if_exists "$reponame.egg-info"
rmdir_if_exists build/

if [ $rtn -ne 0 ]; then
    echo -e "There was an error during the package upload to PyPi."
    echo -e "Please check the console for more details."
    bye 1
else
    echo -e "Process finished successfuly"
    if [ $genmetafailed -eq 0 ]; then
        echo -e "Please finish configuring meta.yaml file in conda/$reponame/"
        echo -e "Follow instructions in https://conda-forge.org/docs/maintainer/\
adding_pkgs.html and https://github.com/conda-forge/staged-recipes to upload it to\
 conda-forge"
    else
        echo -e "Even though it was not possible to generate meta.yaml file."
    fi
    bye 0
fi
